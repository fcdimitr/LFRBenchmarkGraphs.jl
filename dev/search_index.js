var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = LFRBenchmarkGraphs","category":"page"},{"location":"#LFRBenchmarkGraphs","page":"Home","title":"LFRBenchmarkGraphs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LFRBenchmarkGraphs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is a package for generating Lancichinetti-Fortunato-Radicchi model benchmarks graphs, which are widely used in the study of community detection algorithms.","category":"page"},{"location":"#List-of-package-modules","page":"Home","title":"List of package modules","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Function-documentation","page":"Home","title":"Function documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [LFRBenchmarkGraphs]","category":"page"},{"location":"#LFRBenchmarkGraphs.lancichinetti_fortunato_radicchi-Tuple{Integer, Real, Integer}","page":"Home","title":"LFRBenchmarkGraphs.lancichinetti_fortunato_radicchi","text":"lancichinetti_fortunato_radicchi(n::Integer, k_avg::Integer, k_max::Integer)\n\nCreate a Lancichinetti-Fortunato-Radicchi model random graph with n vertices, k_avg average degree, and k_max maximum degree. The model generates graphs with a power-law degree distribution and community structure. Abstractly, we can think of it as an SBM with power-law distribution for the community size and the degree distribution.\n\nOptional Arguments\n\nis_directed=false: if true, return a directed graph.\nseed=1: set the random seed.\ntau=2.0: exponent for the power-law degree distribution for degree distribution.\ntau2=1.0: exponent for the power-law degree distribution for community size distribution.\nnmin=nothing, nmax=nothing: minimum and maximum (range) for community sizes.\noverlapping_nodes=0: number of overlapping nodes.\noverlap_membership=0: number of memberships for overlapping nodes.\n\nNotes\n\nDepending on the input parameter combination, the function may not converge to a solution. If this happens, try different input parameters.\n\nReferences\n\nBenchmarks for testing community detection algorithms on directed and weighted graphs with overlapping communities, Andrea Lancichinetti and Santo Fortunato, 2009. https://doi.org/10.1103/PhysRevE.80.016118\nBenchmark graphs for testing community detection algorithms, Andrea Lancichinetti, Santo Fortunato, and Filippo Radicchi, 2008. https://doi.org/10.1103/PhysRevE.78.046110\nLink to the original source code by the authors\n\nExamples\n\njulia> using LFRBenchmarkGraphs\n\njulia> g,cid = lancichinetti_fortunato_radicchi(20, 4, 5);\n\njulia> g\n{20, 35} undirected simple Int64 graph\n\njulia> println(cid)  # community labels\n[1, 1, 3, 2, 3, 2, 1, 2, 1, 1, 1, 3, 1, 3, 2, 3, 3, 1, 2, 3]\n\n\n\n\n\n\n","category":"method"}]
}
